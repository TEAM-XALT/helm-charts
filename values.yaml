# Default values for jira.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# @Notes
# We must set resources requests and limits for preventing OOM killer

## Atlassian Jira Software image version
## ref: https://hub.docker.com/r/atlassian/jira-software
image:
  repository: xalt/jira
  tag: helm
  pullPolicy: Always

## String to partially override jira.fullname template (will maintain the release name)
nameOverride: ""

## String to fully override jira.fullname template
fullnameOverride: ""

## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#podsecuritycontext-v1-core
podSecurityContext: {}
  # fsGroup: 2001

## Security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
#  capabilities:
#    drop:
#    - ALL
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

## Service/Networking
## ref: https://kubernetes.io/docs/concepts/services-networking/service/
## Kubernetes svc configuration
service:
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  type: NodePort
  ## Use serviceLoadBalancerIP to request a specific static IP, otherwise leave blank
  ##
  ## Avoid removing the http connector, as the Synchrony proxy health check, still requires HTTP
  ## HTTP Port, must be the same as ATL_TOMCAT_PORT (default: 8080)
  port: 8080

## Configure the ingress resource that allows you to access the
## Jira installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: "sticky"
  hosts:
    - host: jira.kap.xalt.team
      paths: ["/"]

## Resources. Mandatory, see @Notes above.
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    memory: 2Gi
    cpu: 1000m
  limits:
    memory: 8Gi

## Replication (without ReplicaSet)
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
replicaCount: 2

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

## Persistent Volume Claim
## Jira Home directory
## https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  enabled: true
  annotations: {}
  accessMode: ReadWriteOnce
  size: 10Gi
  storageClass: aws-efs

## Set up update strategy for Jira installation. Set to Recreate if you use persistent volume
## that cannot be mounted by more than one pods to make sure the pods is destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%

## Container Probes
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## Depending what values we give, Jira won't be reachable. In doubt, leave it as it is.
readinessProbe:
  exec:
    command:
      - bash
      - /opt/atlassian/jira/bin/check-status.sh
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 6
  timeoutSeconds: 1

livenessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 6
  timeoutSeconds: 1

## Postgresql chart configuration
## https://github.com/helm/charts/blob/master/stable/postgresql/values.yaml
##
postgresql:
  ## Whether to deploy a postgres server to satisfy the applications database requirements.
  enabled: true
  postgresqlPassword: youf!twin6LONT6voct

  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: "11"
    pullPolicy: IfNotPresent

  fullnameOverride: jira-db

  persistence:
    size: 8Gi

  initdbScriptsConfigMap: |-
    {{ .Release.Name }}-db-helper-cm

  service:
    type: NodePort

## If postgresql is enabled and no database exists, it will be created (see db-helper ConfigMap)
## by default, vaultSecret* are mapped here
## If vaultSecrets.enabled is false, replace values below in plaintext,
## password will be send to externaldb-secrets
##
## Aliases disabled, not using vaultSecrets anchors.
databaseConnection:
  ## Database host
  # host: *host
  host: jira-db

  ## non-root Username for Jira Database
  # user: *db-user
  user: jirauser

  ## Database password
  # password: *db-pw
  password: jirapassword

  ## Database name
  # database: *db
  database: jiradb

  ## lc_collate and lc_ctype, only in case database needs to be created
  lang: C

  ## Database port number
  port: 5432

  ## Jira specific database information
  ## https://hub.docker.com/r/atlassian/jira-software
  ## JDBC Prefix URL
  urlPrefix: "jdbc:postgresql"

  ## Database Driver
  ## https://hub.docker.com/r/atlassian/jira-software
  databaseDriver: "org.postgresql.Driver"

  ## Database Type
  ## https://hub.docker.com/r/atlassian/jira-software
  type: postgres72

  ##
  ## Database Schema Name
  ## https://hub.docker.com/r/atlassian/jira-software
  ## Depending of the type of the database, the Schema Name needs to be
  ## modified to one of the followings values:
  ## type: mssql      -> schemaName: dbo
  ## type: mysql      -> schemaName: public
  ## type: oracle10g  -> schemaName: NONE
  ## type: postgres72 -> schemaName: public
  schemaName: public

## DB DROP, use with caution!
## If postgresql.enabled is set to true and database exists, it will drop the db before creating a new one
## (see db-helper ConfigMap)
## This shouldn't be changed manually, instead run helm with --set databaseDrop.enabled=true
## to be sure that you know what you are doing
databaseDrop:
  enabled: false

## Environment Variables that will be injected in the ConfigMap
## Default values unless otherwise stated
envVars:
  RAM_MIN: 2048
  RAM_MAX: 2048
  JIRA_CLUSTER: true
  DATABASE_CONNECTION: jira-db:5432
  DATABASE_NAME: jiradb
  DATABASE_USERNAME: jirauser
  DATABASE_PASSWORD: jirapassword

## End of Environment Variables (envVars)

## JVM_SUPPORT_RECOMMENDED_ARGS
## Additional container environment variables
# extraEnv: "-XX:MaxMetaspaceSize=512m -XX:MaxDirectMemorySize=10m -Dsynchrony.memory.max=0m"
